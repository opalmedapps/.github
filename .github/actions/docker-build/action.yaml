# SPDX-FileCopyrightText: Copyright (C) 2025 Opal Health Informatics Group <https://www.opalmedapps.com>
#
# SPDX-License-Identifier: MIT

name: 'Build Docker Image'
description: 'Logs in to the container registry, sets up Docker Buildx, validates the build configuration, builds the image and pushes to the container registry.'

inputs:
  registry:
    description: 'The container registry to use for the image'
    required: true
  image:
    description: 'The name of the image to build'
    required: true
  username:
    description: 'The username of the container registry user'
    required: true
  password:
    description: 'The password of the container registry user'
    required: true
  context:
    description: 'The context path when building the image'
    default: '.'

outputs:
  tags:
    description: 'The tag or list of tags of the built image. Multiple tags are separated by \n.'
    value: ${{ steps.set-outputs.outputs.tags }}
  tag:
    description: 'A single tag of the built image'
    value: ${{ steps.set-outputs.outputs.tag }}

runs:
  using: 'composite'
  steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3.6.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.11.1
      with:
        cache-binary: false
    - name: Validate build configuration
      uses: docker/build-push-action@v6.18.0
      with:
        context: ${{ inputs.context }}  # zizmor: ignore[template-injection]
        call: check
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5.8.0
      with:
        images: ${{ inputs.registry }}/${{ inputs.image }}
    # special case for .github to strip the leading period away since it is an invalid tag name
    # note that this only works if the tags contains a single tag, not several of them
    - name: Sanitize tag name
      id: tags
      shell: bash
      env:
        TAGS: ${{ steps.meta.outputs.tags }}
      run: |
        TAG_NAMES=$(echo "$TAGS" | sed 's/\/\./\//g')
        echo "Sanitized tag: $TAG_NAMES"
        {
          echo "TAGS<<EOF"
          echo "$TAG_NAMES"
          echo EOF
        } >> "$GITHUB_ENV"
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6.18.0
      with:
        context: ${{ inputs.context }}  # zizmor: ignore[template-injection]
        # load image into docker to test it in the next step
        load: true
        # only push to the registry when it is not a PR (i.e., main branch)
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.TAGS }}
        labels: ${{ steps.meta.outputs.labels }}
        # https://docs.docker.com/build/ci/github-actions/cache/#github-cache
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        echo "tags=$TAGS" >> "$GITHUB_OUTPUT"
        echo "tag=$(echo "$TAGS" | head --lines 1)" >> "$GITHUB_OUTPUT"
