# SPDX-FileCopyrightText: Copyright (C) 2025 Opal Health Informatics Group <https://www.opalmedapps.com>
#
# SPDX-License-Identifier: MIT
name: build

on:
  workflow_call:
    inputs:
      context:
        description: Build context
        type: string
        default: .
      test-command:
        description: Command to use to test the built image
        type: string
        required: true

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
          lfs: true
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
        with:
          cache-binary: false
      - name: Validate build configuration
        uses: docker/build-push-action@v6.15.0
        with:
          context: ${{ inputs.context }}
          call: check
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # special case for .github to strip the leading period away since it is an invalid tag name
      # note that this only works if the tags contains a single tag, not several of them
      - name: Sanitize tag name
        id: tags
        # if: ${{ endsWith(github.repository, '.github') }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          TAG_NAMES=$(echo "$TAGS" | sed 's/\/\./\//g')
          echo "Sanitized tag: $TAG_NAMES"
          echo "tags='$TAG_NAMES'" >> "$GITHUB_OUTPUT"
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6.15.0
        with:
          context: ${{ inputs.context }}
          # load image into docker to test it in the next step
          load: true
          # only push to the registry when it is not a PR (i.e., main branch)
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # https://docs.docker.com/build/ci/github-actions/cache/#github-cache
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
      - name: Test image
        env:
          TEST_COMMAND: ${{ inputs.test-command }}
          TAGS: ${{ steps.tags.outputs.tags }}
        run: |
          # shellcheck disable=SC2086
          echo docker run --rm "$TAGS" $TEST_COMMAND
          # shellcheck disable=SC2086
          docker run --rm "$TAGS" $TEST_COMMAND
      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v2.2.3
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true
